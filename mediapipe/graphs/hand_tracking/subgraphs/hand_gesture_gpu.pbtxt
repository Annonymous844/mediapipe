type: "HandGestureSubgraph"

input_stream: "IMAGE_GPU:throttled_input_video"
input_stream: "NORM_RECT:hand_rect"
output_stream: "CLASSIFICATIONS:classifications"


# Crops the rectangle that contains a hand from the input image.
node {
  calculator: "ImageCroppingCalculator"
  input_stream: "IMAGE_GPU:throttled_input_video"
  input_stream: "NORM_RECT:hand_rect"
  output_stream: "IMAGE_GPU:hand_image"
}

#node {
#  calculator: "GpuBufferToImageFrameCalculator"
#  input_stream: "hand_image"
#  output_stream: "hand_image_cpu"
#}

# Transforms the input image on GPU to a 320x320 image. To scale the image, by
# default it uses the STRETCH scale mode that maps the entire input image to the
# entire transformed image. As a result, image aspect ratio may be changed and
# objects in the image may be deformed (stretched or squeezed), but the object
# detection model used in this graph is agnostic to that deformation.
node: {
  calculator: "ImageTransformationCalculator"
  input_stream: "IMAGE_GPU:hand_image"
  output_stream: "IMAGE_GPU:transformed_input_video"
  node_options: {
    [type.googleapis.com/mediapipe.ImageTransformationCalculatorOptions] {
      output_width: 150
      output_height: 150
    }
  }
}

# Generates a single side packet containing a TensorFlow Lite op resolver that
# supports custom ops needed by the model used in this graph.
node {
  calculator: "TfLiteCustomOpResolverCalculator"
  output_side_packet: "op_resolver"
}

# Converts the transformed input image on GPU into an image tensor stored as a
# TfLiteTensor.
node {
  calculator: "TfLiteConverterCalculator"
  input_stream: "IMAGE_GPU:transformed_input_video"
  output_stream: "TENSORS_GPU:image_tensor"
}

# Runs a TensorFlow Lite model on GPU that takes an image tensor and outputs a
# vector of tensors representing, for instance, detection boxes/keypoints and
# scores.
node {
  calculator: "TfLiteInferenceCalculator"
  input_stream: "TENSORS_GPU:image_tensor"
  input_side_packet: "CUSTOM_OP_RESOLVER:op_resolver"
  output_stream: "TENSORS:detection_tensors"
  node_options: {
    [type.googleapis.com/mediapipe.TfLiteInferenceCalculatorOptions] {
      model_path: "rps_150x150.20191024.1640.tflite"
    }
  }
}
node {
calculator: "TfLiteTensorsToClassificationCalculator"
input_stream: "TENSORS:detection_tensors"
output_stream: "CLASSIFICATIONS:classifications"
node_options: {
[type.googleapis.com/mediapipe.TfLiteTensorsToClassificationCalculatorOptions] {
min_score_threshold: 0.0
top_k: 1
label_map_path: "rps_labelmap.txt"
}
}
}

